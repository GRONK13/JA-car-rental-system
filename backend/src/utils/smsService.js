/**
 * SMS Service using Semaphore API
 * 
 * This service handles:
 * - Sending OTP codes via SMS
 * - Phone number validation
 * - Integration with Semaphore SMS Gateway
 */

const SEMAPHORE_API_KEY = process.env.SEMAPHORE_API_KEY;
const SEMAPHORE_OTP_URL = 'https://api.semaphore.co/api/v4/otp';
const SENDER_NAME = 'JACarRental';

/**
 * Generate a 6-digit OTP code
 * @returns {string} 6-digit numeric code
 */
export const generateOTP = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

/**
 * Format phone number for Philippines
 * Converts various formats to +63XXXXXXXXXX format
 * @param {string} phone - Phone number in any format
 * @returns {string} Formatted phone number
 */
export const formatPhoneNumber = (phone) => {
  // Remove all non-numeric characters
  let cleaned = phone.replace(/\D/g, '');
  
  // Handle different phone number formats
  if (cleaned.startsWith('0')) {
    // 09XX XXX XXXX -> +639XXXXXXXXX
    cleaned = '63' + cleaned.substring(1);
  } else if (cleaned.startsWith('9')) {
    // 9XX XXX XXXX -> +639XXXXXXXXX
    cleaned = '63' + cleaned;
  } else if (cleaned.startsWith('63')) {
    // Already in correct format
    cleaned = cleaned;
  } else if (cleaned.length === 10) {
    // Assume it's missing country code
    cleaned = '63' + cleaned;
  }
  
  return '+' + cleaned;
};

/**
 * Validate Philippine phone number format
 * @param {string} phone - Phone number to validate
 * @returns {boolean} Is valid phone number
 */
export const isValidPhilippinePhone = (phone) => {
  const cleaned = phone.replace(/\D/g, '');
  
  // Check if it matches Philippine number patterns
  const patterns = [
    /^09\d{9}$/,          // 09XX XXX XXXX
    /^9\d{9}$/,           // 9XX XXX XXXX
    /^639\d{9}$/,         // 639XX XXX XXXX
    /^\+639\d{9}$/,       // +639XX XXX XXXX
  ];
  
  return patterns.some(pattern => pattern.test(phone));
};

/**
 * Send OTP via SMS using Semaphore OTP API
 * @param {string} phoneNumber - Recipient phone number
 * @param {string} purpose - Purpose of OTP (registration, phone_change, etc.)
 * @returns {Promise<Object>} API response with OTP code generated by Semaphore
 */
export const sendOTPSMS = async (phoneNumber, purpose = 'verification') => {
  try {
    if (!SEMAPHORE_API_KEY) {
      throw new Error('Semaphore API key not configured');
    }

    // Format phone number
    const formattedPhone = formatPhoneNumber(phoneNumber);
    
    console.log('üì± Sending OTP SMS:', {
      to: formattedPhone,
      purpose: purpose
    });

    // Create message template with {otp} placeholder
    // Semaphore will generate the OTP and replace {otp} with it
    let message = '';
    if (purpose === 'registration') {
      message = `Welcome to JA Car Rental! Your verification code is {otp}. Valid for 10 minutes. Do not share this code.`;
    } else if (purpose === 'phone_change') {
      message = `JA Car Rental: Verify your new phone number. Your code is {otp}. Valid for 10 minutes.`;
    } else {
      message = `JA Car Rental: Your verification code is {otp}. Valid for 10 minutes. Do not share this code.`;
    }

    // Prepare form data for Semaphore OTP API
    // NOTE: We do NOT pass 'code' parameter - let Semaphore generate it
    const formData = new URLSearchParams();
    formData.append('apikey', SEMAPHORE_API_KEY);
    formData.append('number', formattedPhone);
    formData.append('message', message);
    formData.append('sendername', SENDER_NAME);

    // Send OTP via Semaphore OTP API
    const response = await fetch(SEMAPHORE_OTP_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: formData.toString()
    });

    const data = await response.json();

    if (response.ok && Array.isArray(data) && data.length > 0) {
      const otpResponse = data[0];
      console.log('‚úÖ OTP SMS sent successfully:', {
        message_id: otpResponse.message_id,
        recipient: otpResponse.recipient,
        status: otpResponse.status,
        network: otpResponse.network,
        code: otpResponse.code
      });
      
      return {
        success: true,
        messageId: otpResponse.message_id,
        recipient: otpResponse.recipient,
        code: otpResponse.code,
        status: otpResponse.status,
        network: otpResponse.network,
        data: otpResponse
      };
    } else {
      console.error('‚ùå OTP SMS sending failed:', data);
      throw new Error(data.message || data.error || 'Failed to send OTP SMS');
    }

  } catch (error) {
    console.error('‚ùå SMS Service Error:', error);
    
    // In development mode, generate and log an OTP for testing
    if (process.env.NODE_ENV === 'development') {
      const devOtp = generateOTP();
      console.log(`üß™ Development Mode: Generated OTP Code for ${phoneNumber} is: ${devOtp}`);
      return {
        success: true,
        messageId: 'dev-mode-' + Date.now(),
        devMode: true,
        code: devOtp,
        otp: devOtp
      };
    }
    
    throw error;
  }
};

/**
 * Send verification success notification
 * @param {string} phoneNumber - Recipient phone number
 * @param {string} userName - User's name
 * @returns {Promise<Object>} API response
 */
export const sendVerificationSuccessSMS = async (phoneNumber, userName) => {
  try {
    if (!SEMAPHORE_API_KEY) {
      throw new Error('Semaphore API key not configured');
    }

    const formattedPhone = formatPhoneNumber(phoneNumber);
    const message = `Hello ${userName}! Your phone number has been successfully verified. Welcome to JA Car Rental! üöó`;

    // Use regular messages endpoint for non-OTP messages
    const MESSAGES_URL = 'https://api.semaphore.co/api/v4/messages';
    
    const formData = new URLSearchParams();
    formData.append('apikey', SEMAPHORE_API_KEY);
    formData.append('number', formattedPhone);
    formData.append('message', message);
    formData.append('sendername', SENDER_NAME);

    const response = await fetch(MESSAGES_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: formData.toString()
    });

    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Verification success SMS sent');
      return { success: true, data };
    } else {
      console.error('‚ùå Failed to send success SMS:', data);
      // Don't throw error for notification SMS
      return { success: false, data };
    }

  } catch (error) {
    console.error('‚ùå Error sending success SMS:', error);
    return { success: false, error: error.message };
  }
};

export default {
  generateOTP,
  formatPhoneNumber,
  isValidPhilippinePhone,
  sendOTPSMS,
  sendVerificationSuccessSMS
};
